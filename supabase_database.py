import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine, text
from contextlib import asynccontextmanager
from shared.models import Base
from shared.config_supabase import supabase_config, SUPABASE_DATABASE_CONFIG
import logging

logger = logging.getLogger(__name__)

class SupabaseDatabaseManager:
    def __init__(self):
        self.engine = None
        self.async_session_maker = None
        self.is_initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase"""
        if self.is_initialized:
            return
            
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase PostgreSQL
            database_url = supabase_config.DATABASE_URL.replace(
                'postgresql://', 'postgresql+asyncpg://'
            )
            
            self.engine = create_async_engine(
                database_url,
                **SUPABASE_DATABASE_CONFIG['postgresql']
            )
            
            self.async_session_maker = async_sessionmaker(
                self.engine, 
                class_=AsyncSession,
                expire_on_commit=False
            )
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase
            async with self.engine.begin() as conn:
                await conn.run_sync(Base.metadata.create_all)
            
            logger.info("‚úÖ Supabase –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            logger.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {supabase_config.SUPABASE_PROJECT_ID}.supabase.co")
            self.is_initialized = True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase: {e}")
            raise
    
    @asynccontextmanager
    async def get_session(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏–µ–π Supabase"""
        if not self.is_initialized:
            await self.initialize()
            
        async with self.async_session_maker() as session:
            try:
                yield session
                await session.commit()
            except Exception as e:
                await session.rollback()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ Supabase: {e}")
                raise
            finally:
                await session.close()
    
    async def health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Supabase"""
        try:
            async with self.get_session() as session:
                result = await session.execute(text("SELECT 1 as health_check"))
                return result.scalar() == 1
        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Supabase –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {e}")
            return False
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Supabase"""
        if self.engine:
            await self.engine.dispose()
            logger.info("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase –∑–∞–∫—Ä—ã—Ç–æ")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Supabase
supabase_db_manager = SupabaseDatabaseManager()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–µ–ª—è–º–∏ –≤ Supabase
from sqlalchemy import select, update, delete, func
from sqlalchemy.orm import selectinload
from shared.models import Trainer, Client, Workout, Exercise, WorkoutStatus, trainer_client_table

class SupabaseTrainerService:
    @staticmethod
    async def create_trainer(telegram_id: str, **kwargs):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ Supabase"""
        async with supabase_db_manager.get_session() as session:
            trainer = Trainer(telegram_id=telegram_id, **kwargs)
            session.add(trainer)
            await session.flush()
            logger.info(f"üë§ –¢—Ä–µ–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω –≤ Supabase: {trainer.first_name} (ID: {trainer.id})")
            return trainer
    
    @staticmethod
    async def get_trainer_by_telegram_id(telegram_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–∑ Supabase –ø–æ Telegram ID"""
        async with supabase_db_manager.get_session() as session:
            result = await session.execute(
                select(Trainer).where(Trainer.telegram_id == telegram_id)
            )
            trainer = result.scalar_one_or_none()
            if trainer:
                logger.info(f"üë§ –¢—Ä–µ–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω –≤ Supabase: {trainer.first_name}")
            return trainer
    
    @staticmethod
    async def update_trainer(trainer_id: int, **kwargs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ Supabase"""
        async with supabase_db_manager.get_session() as session:
            await session.execute(
                update(Trainer).where(Trainer.id == trainer_id).values(**kwargs)
            )
            logger.info(f"üë§ –¢—Ä–µ–Ω–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Supabase: ID {trainer_id}")

class SupabaseClientService:
    @staticmethod
    async def create_client(trainer_id: int, **kwargs):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ Supabase"""
        async with supabase_db_manager.get_session() as session:
            client = Client(**kwargs)
            session.add(client)
            await session.flush()
            
            # –°–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º
            trainer = await session.get(Trainer, trainer_id)
            if trainer:
                trainer.clients.append(client)
            
            await session.refresh(client)
            logger.info(f"üë• –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω –≤ Supabase: {client.first_name} (ID: {client.id})")
            return client
    
    @staticmethod
    async def get_trainer_clients(trainer_id: int, limit: int = None, offset: int = 0):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–∑ Supabase"""
        async with supabase_db_manager.get_session() as session:
            query = (
                select(Client)
                .join(trainer_client_table)
                .where(trainer_client_table.c.trainer_id == trainer_id)
                .order_by(Client.created_at.desc())
            )
            
            if limit:
                query = query.limit(limit).offset(offset)
                
            result = await session.execute(query)
            clients = result.scalars().all()
            logger.info(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ Supabase: {len(clients)}")
            return clients
    
    @staticmethod
    async def get_client_by_id(client_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Supabase –ø–æ ID"""
        async with supabase_db_manager.get_session() as session:
            result = await session.execute(
                select(Client).where(Client.id == client_id)
            )
            return result.scalar_one_or_none()
    
    @staticmethod
    async def update_client(client_id: int, **kwargs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –≤ Supabase"""
        async with supabase_db_manager.get_session() as session:
            await session.execute(
                update(Client).where(Client.id == client_id).values(**kwargs)
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            result = await session.execute(
                select(Client).where(Client.id == client_id)
            )
            logger.info(f"üë• –ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Supabase: ID {client_id}")
            return result.scalar_one_or_none()
    
    @staticmethod
    async def delete_client(client_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Supabase"""
        async with supabase_db_manager.get_session() as session:
            await session.execute(
                delete(Client).where(Client.id == client_id)
            )
            logger.info(f"üë• –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ Supabase: ID {client_id}")
            return True
    
    @staticmethod
    async def search_clients(trainer_id: int, query: str):
        """–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ Supabase –ø–æ –∏–º–µ–Ω–∏/—Ñ–∞–º–∏–ª–∏–∏"""
        async with supabase_db_manager.get_session() as session:
            search_pattern = f"%{query}%"
            result = await session.execute(
                select(Client)
                .join(trainer_client_table)
                .where(
                    trainer_client_table.c.trainer_id == trainer_id,
                    (Client.first_name.ilike(search_pattern) | 
                     Client.last_name.ilike(search_pattern))
                )
                .order_by(Client.first_name)
            )
            clients = result.scalars().all()
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ Supabase: {len(clients)} –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'")
            return clients
    
    @staticmethod
    async def get_clients_count(trainer_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–∑ Supabase"""
        async with supabase_db_manager.get_session() as session:
            result = await session.execute(
                select(func.count(Client.id))
                .join(trainer_client_table)
                .where(trainer_client_table.c.trainer_id == trainer_id)
            )
            count = result.scalar() or 0
            logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ Supabase: {count}")
            return count

class SupabaseWorkoutService:
    @staticmethod
    async def create_workout(trainer_id: int, client_id: int, **kwargs):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ Supabase"""
        async with supabase_db_manager.get_session() as session:
            workout_data = {
                'trainer_id': trainer_id,
                'client_id': client_id,
                **kwargs
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º workout_type
            if 'workout_type' in kwargs:
                workout_data['trainer_notes'] = f"[{kwargs['workout_type']}] " + (workout_data.get('trainer_notes', '') or '')
                del workout_data['workout_type']
            
            workout = Workout(**workout_data)
            session.add(workout)
            await session.flush()
            await session.refresh(workout)
            logger.info(f"üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Supabase: ID {workout.id}")
            return workout
    
    @staticmethod
    async def get_workout_by_id(workout_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ Supabase –ø–æ ID"""
        async with supabase_db_manager.get_session() as session:
            result = await session.execute(
                select(Workout)
                .options(selectinload(Workout.client))
                .where(Workout.id == workout_id)
            )
            return result.scalar_one_or_none()
    
    @staticmethod
    async def get_upcoming_workouts(trainer_id: int, limit: int = 10):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–∑ Supabase"""
        async with supabase_db_manager.get_session() as session:
            from datetime import datetime
            result = await session.execute(
                select(Workout)
                .options(selectinload(Workout.client))
                .where(
                    Workout.trainer_id == trainer_id,
                    Workout.scheduled_date >= datetime.now(),
                    Workout.status == WorkoutStatus.PLANNED
                )
                .order_by(Workout.scheduled_date)
                .limit(limit)
            )
            workouts = result.scalars().all()
            logger.info(f"üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –±–ª–∏–∂–∞–π—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–∑ Supabase: {len(workouts)}")
            return workouts
    
    @staticmethod
    async def get_today_workouts(trainer_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ Supabase"""
        async with supabase_db_manager.get_session() as session:
            from datetime import datetime, date
            today = date.today()
            result = await session.execute(
                select(Workout)
                .options(selectinload(Workout.client))
                .where(
                    Workout.trainer_id == trainer_id,
                    func.date(Workout.scheduled_date) == today
                )
                .order_by(Workout.scheduled_date)
            )
            workouts = result.scalars().all()
            logger.info(f"üìÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ Supabase: {len(workouts)}")
            return workouts
    
    @staticmethod
    async def get_client_workouts(client_id: int, limit: int = None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Supabase"""
        async with supabase_db_manager.get_session() as session:
            query = (
                select(Workout)
                .options(selectinload(Workout.trainer))
                .where(Workout.client_id == client_id)
                .order_by(Workout.scheduled_date.desc())
            )
            
            if limit:
                query = query.limit(limit)
            
            result = await session.execute(query)
            workouts = result.scalars().all()
            logger.info(f"üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –≤ Supabase: {len(workouts)}")
            return workouts
    
    @staticmethod
    async def get_workouts_count(trainer_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–∑ Supabase"""
        async with supabase_db_manager.get_session() as session:
            result = await session.execute(
                select(func.count(Workout.id))
                .where(Workout.trainer_id == trainer_id)
            )
            count = result.scalar() or 0
            logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ Supabase: {count}")
            return count
    
    @staticmethod
    async def update_workout_plan(workout_id: int, exercises_plan: list):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ Supabase"""
        async with supabase_db_manager.get_session() as session:
            await session.execute(
                update(Workout)
                .where(Workout.id == workout_id)
                .values(exercises=exercises_plan)
            )
            logger.info(f"üí™ –ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Supabase: ID {workout_id}")
    
    @staticmethod
    async def update_workout_status(workout_id: int, status: str, **kwargs):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ Supabase"""
        async with supabase_db_manager.get_session() as session:
            update_data = {'status': status, **kwargs}
            
            if status == 'completed' and 'completed_at' not in update_data:
                from datetime import datetime
                update_data['completed_at'] = datetime.now()
            
            await session.execute(
                update(Workout)
                .where(Workout.id == workout_id)
                .values(**update_data)
            )
            logger.info(f"üí™ –°—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Supabase: ID {workout_id} -> {status}")
    
    @staticmethod
    async def delete_workout(workout_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ Supabase"""
        async with supabase_db_manager.get_session() as session:
            await session.execute(
                delete(Workout).where(Workout.id == workout_id)
            )
            logger.info(f"üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Supabase: ID {workout_id}")
            return True

class SupabaseExerciseService:
    @staticmethod
    async def get_exercises_by_category(category: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ Supabase"""
        async with supabase_db_manager.get_session() as session:
            result = await session.execute(
                select(Exercise).where(Exercise.category == category)
            )
            return result.scalars().all()
    
    @staticmethod
    async def get_exercise_by_id(exercise_id: int):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ Supabase –ø–æ ID"""
        async with supabase_db_manager.get_session() as session:
            result = await session.execute(
                select(Exercise).where(Exercise.id == exercise_id)
            )
            return result.scalar_one_or_none()
    
    @staticmethod
    async def create_exercise(name: str, category: str, **kwargs):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ Supabase"""
        async with supabase_db_manager.get_session() as session:
            exercise = Exercise(name=name, category=category, **kwargs)
            session.add(exercise)
            await session.flush()
            await session.refresh(exercise)
            logger.info(f"üèãÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ Supabase: {exercise.name}")
            return exercise
    
    @staticmethod
    async def search_exercises(query: str):
        """–ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ Supabase –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        async with supabase_db_manager.get_session() as session:
            search_pattern = f"%{query}%"
            result = await session.execute(
                select(Exercise).where(Exercise.name.ilike(search_pattern))
            )
            return result.scalars().all()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ Supabase
async def init_basic_exercises():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ Supabase (–±–µ–∑ –¥–µ–º–æ-–∫–ª–∏–µ–Ω—Ç–æ–≤)"""
    async with supabase_db_manager.get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        result = await session.execute(select(Exercise).limit(1))
        if result.scalar_one_or_none():
            logger.info("üèãÔ∏è –ë–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —É–∂–µ –µ—Å—Ç—å –≤ Supabase")
            return  # –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —É–∂–µ –µ—Å—Ç—å
        
        logger.info("üèãÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ Supabase...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–±–µ–∑ –¥–µ–º–æ-–∫–ª–∏–µ–Ω—Ç–æ–≤/—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)
        exercises = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
            Exercise(
                name="–û—Ç–∂–∏–º–∞–Ω–∏—è",
                category="chest",
                muscle_groups=["chest", "triceps", "shoulders"],
                equipment="bodyweight",
                difficulty="beginner",
                description="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç –ø–æ–ª–∞",
                instructions="–ü—Ä–∏–º–∏—Ç–µ —É–ø–æ—Ä –ª–µ–∂–∞, –æ–ø—É—Å—Ç–∏—Ç–µ—Å—å –¥–æ –∫–∞—Å–∞–Ω–∏—è –≥—Ä—É–¥—å—é –ø–æ–ª–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                calories_per_minute=8.0
            ),
            Exercise(
                name="–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è",
                category="legs",
                muscle_groups=["quadriceps", "glutes", "hamstrings"],
                equipment="bodyweight",
                difficulty="beginner",
                description="–ë–∞–∑–æ–≤—ã–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º",
                instructions="–ü–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≥–∏ –Ω–∞ —à–∏—Ä–∏–Ω–µ –ø–ª–µ—á, –æ–ø—É—Å—Ç–∏—Ç–µ—Å—å, —Å–≥–∏–±–∞—è –∫–æ–ª–µ–Ω–∏ –¥–æ 90 –≥—Ä–∞–¥—É—Å–æ–≤",
                calories_per_minute=6.0
            ),
            Exercise(
                name="–ü–ª–∞–Ω–∫–∞",
                category="core",
                muscle_groups=["core", "shoulders"],
                equipment="bodyweight",
                difficulty="beginner",
                description="–°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–æ—Ä–∞",
                instructions="–ü—Ä–∏–º–∏—Ç–µ —É–ø–æ—Ä –ª–µ–∂–∞ –Ω–∞ –ø—Ä–µ–¥–ø–ª–µ—á—å—è—Ö, –¥–µ—Ä–∂–∏—Ç–µ —Ç–µ–ª–æ –ø—Ä—è–º–æ–π –ª–∏–Ω–∏–µ–π",
                calories_per_minute=5.0
            ),
        ]
        
        for exercise in exercises:
            session.add(exercise)
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(exercises)} –±–∞–∑–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ Supabase")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
async def init_supabase_database():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await supabase_db_manager.initialize()
    await init_basic_exercises()
    logger.info("‚úÖ Supabase –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ (–±–µ–∑ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö)")
    logger.info("üöÄ –ì–æ—Ç–æ–≤–æ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫!")
