#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Supabase
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Supabase
def load_supabase_env():
    """–ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞ –¥–ª—è Supabase"""
    env_path = Path(__file__).parent / '.env.supabase'
    if env_path.exists():
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
        print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    else:
        print(f"‚ùå –§–∞–π–ª .env.supabase –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    return True

async def test_supabase_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase"""
    print("üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...")
    
    try:
        from shared.supabase_database import supabase_db_manager
        from shared.config_supabase import supabase_config
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await supabase_db_manager.initialize()
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        print(f"üìç URL –ø—Ä–æ–µ–∫—Ç–∞: {supabase_config.SUPABASE_URL}")
        print(f"üÜî ID –ø—Ä–æ–µ–∫—Ç–∞: {supabase_config.SUPABASE_PROJECT_ID}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ –ë–î
        health_check = await supabase_db_manager.health_check()
        if health_check:
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Supabase –ø—Ä–æ–π–¥–µ–Ω–∞")
        else:
            print("‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Supabase –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase: {e}")
        return False

async def test_supabase_crud():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –≤ Supabase"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –≤ Supabase...")
    
    try:
        from shared.supabase_database import (
            SupabaseTrainerService, 
            SupabaseClientService, 
            SupabaseWorkoutService,
            SupabaseExerciseService
        )
        from shared.models import Gender, Goal
        from datetime import datetime, timedelta
        
        # 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
        print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞...")
        trainer = await SupabaseTrainerService.create_trainer(
            telegram_id="test_123456789",
            username="test_trainer",
            first_name="–¢–µ—Å—Ç",
            last_name="–¢—Ä–µ–Ω–µ—Ä",
            phone="+7 999 123 45 67",
            email="test@example.com"
        )
        print(f"‚úÖ –¢—Ä–µ–Ω–µ—Ä —Å–æ–∑–¥–∞–Ω: {trainer.first_name} (ID: {trainer.id})")
        
        # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        print("üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞...")
        client = await SupabaseClientService.create_client(
            trainer_id=trainer.id,
            first_name="–ê–Ω–Ω–∞",
            last_name="–ò–≤–∞–Ω–æ–≤–∞",
            phone="+7 999 123 45 68",
            email="anna@example.com",
            gender=Gender.FEMALE,
            height=165.0,
            weight=60.0,
            primary_goal=Goal.WEIGHT_LOSS,
            activity_level="moderate"
        )
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {client.first_name} (ID: {client.id})")
        
        # 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        print("üí™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏...")
        scheduled_date = datetime.now() + timedelta(days=1)
        workout = await SupabaseWorkoutService.create_workout(
            trainer_id=trainer.id,
            client_id=client.id,
            scheduled_date=scheduled_date,
            workout_type="–°–∏–ª–æ–≤–∞—è",
            duration_minutes=90,
            location="–°–ø–æ—Ä—Ç–∑–∞–ª",
            trainer_notes="–¢–µ—Å—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
        )
        print(f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID {workout.id}")
        
        # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞...")
        found_clients = await SupabaseClientService.search_clients(trainer.id, "–ê–Ω–Ω–∞")
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(found_clients)}")
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        clients_count = await SupabaseClientService.get_clients_count(trainer.id)
        workouts_count = await SupabaseWorkoutService.get_workouts_count(trainer.id)
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {clients_count} –∫–ª–∏–µ–Ω—Ç–æ–≤, {workouts_count} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        
        # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        print("‚úèÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
        updated_client = await SupabaseClientService.update_client(
            client.id,
            weight=58.0,
            target_weight=55.0
        )
        print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: –Ω–æ–≤—ã–π –≤–µ—Å {updated_client.weight} –∫–≥")
        
        # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        print("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        trainer_clients = await SupabaseClientService.get_trainer_clients(trainer.id)
        upcoming_workouts = await SupabaseWorkoutService.get_upcoming_workouts(trainer.id)
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {len(trainer_clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤, {len(upcoming_workouts)} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        
        # 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        print("üèãÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
        exercise = await SupabaseExerciseService.create_exercise(
            name="–¢–µ—Å—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ",
            category="test",
            muscle_groups=["test"],
            equipment="test",
            difficulty="beginner",
            description="–¢–µ—Å—Ç–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"
        )
        print(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {exercise.name} (ID: {exercise.id})")
        
        print("\nüéâ –í—Å–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_basic_exercises():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    print("\nüèãÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –≤ Supabase...")
    
    try:
        from shared.supabase_database import init_basic_exercises, SupabaseExerciseService
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        await init_basic_exercises()
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        exercises = await SupabaseExerciseService.get_exercises_by_category("chest")
        print(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –≥—Ä—É–¥–∏: {len(exercises)}")
        
        exercises = await SupabaseExerciseService.get_exercises_by_category("legs")
        print(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –Ω–æ–≥: {len(exercises)}")
        
        exercises = await SupabaseExerciseService.get_exercises_by_category("core")
        print(f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ—Ä–∞: {len(exercises)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {e}")
        return False

async def cleanup_test_data():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from shared.supabase_database import supabase_db_manager
        from sqlalchemy import text
        
        async with supabase_db_manager.get_session() as session:
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            await session.execute(text("DELETE FROM workouts WHERE trainer_id IN (SELECT id FROM trainers WHERE telegram_id = 'test_123456789')"))
            await session.execute(text("DELETE FROM trainer_client WHERE trainer_id IN (SELECT id FROM trainers WHERE telegram_id = 'test_123456789')"))
            await session.execute(text("DELETE FROM clients WHERE id IN (SELECT client_id FROM trainer_client WHERE trainer_id IN (SELECT id FROM trainers WHERE telegram_id = 'test_123456789'))"))
            await session.execute(text("DELETE FROM trainers WHERE telegram_id = 'test_123456789'"))
            await session.execute(text("DELETE FROM exercises WHERE name = '–¢–µ—Å—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ'"))
            
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Supabase")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not load_supabase_env():
        return
    
    success = True
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not await test_supabase_connection():
        success = False
    
    # –¢–µ—Å—Ç 2: CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
    if success:
        if not await test_supabase_crud():
            success = False
    
    # –¢–µ—Å—Ç 3: –ë–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    if success:
        if not await test_basic_exercises():
            success = False
    
    # –û—á–∏—Å—Ç–∫–∞
    await cleanup_test_data()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    if success:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ SUPABASE –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print()
        print("‚úÖ –ß—Ç–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:")
        print("   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase PostgreSQL")
        print("   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä–æ–≤")
        print("   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏")
        print("   ‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫")
        print("   ‚Ä¢ –ü–æ–∏—Å–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        print("   ‚Ä¢ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
        print()
        print("üöÄ –í–∞—à —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å Supabase!")
        print("   –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –æ–±–ª–∞–∫–µ")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    try:
        from shared.supabase_database import supabase_db_manager
        await supabase_db_manager.close()
        print("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase –∑–∞–∫—Ä—ã—Ç–æ")
    except:
        pass

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
