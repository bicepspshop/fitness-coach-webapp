from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from shared.supabase_database import SupabaseTrainerService, SupabaseClientService, SupabaseWorkoutService
from shared.models import WorkoutStatus
from keyboards.main_menu import (
    get_workouts_menu_keyboard, get_workout_type_keyboard, 
    get_confirmation_keyboard
)
from utils.states import BotStates
import logging
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

workouts_supabase_router = Router()

@workouts_supabase_router.message(Command("workouts"))
async def cmd_workouts_supabase(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ —á–µ—Ä–µ–∑ Supabase"""
    await show_workouts_menu_supabase(message)

async def show_workouts_menu_supabase(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–∑ Supabase"""
    user_id = str(message.from_user.id)
    trainer = await SupabaseTrainerService.get_trainer_by_telegram_id(user_id)
    
    if not trainer:
        await message.answer("‚ùå –¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Supabase
    total_workouts = await SupabaseWorkoutService.get_workouts_count(trainer.id)
    today_workouts = await SupabaseWorkoutService.get_today_workouts(trainer.id)
    upcoming_workouts = await SupabaseWorkoutService.get_upcoming_workouts(trainer.id, limit=5)
    
    workouts_text = f"""
üí™ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏</b>
‚òÅÔ∏è <i>–î–∞–Ω–Ω—ã–µ –∏–∑ Supabase</i>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_workouts}
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {len(today_workouts)}
‚Ä¢ –ë–ª–∏–∂–∞–π—à–∏—Ö: {len(upcoming_workouts)}

üìÖ <b>–ù–∞ —Å–µ–≥–æ–¥–Ω—è:</b>
"""
    
    if today_workouts:
        for workout in today_workouts:
            time_str = workout.scheduled_date.strftime('%H:%M')
            status_emoji = {
                "planned": "‚è≥",
                "completed": "‚úÖ", 
                "missed": "‚ùå",
                "cancelled": "üö´"
            }
            emoji = status_emoji.get(workout.status.value, "‚è≥")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            workout_type = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
            if workout.trainer_notes and workout.trainer_notes.startswith('['):
                end_bracket = workout.trainer_notes.find(']')
                if end_bracket > 0:
                    workout_type = workout.trainer_notes[1:end_bracket]
            
            workouts_text += f"‚Ä¢ {emoji} {time_str} - {workout.client.first_name} ({workout_type})\n"
    else:
        workouts_text += "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
    
    workouts_text += f"""
üîß <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ ‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
‚Ä¢ üìÖ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º

–í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Supabase.
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="workout_add")
    )
    builder.row(
        InlineKeyboardButton(text="üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="workout_today"),
        InlineKeyboardButton(text="üìä –í—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="workout_all")
    )
    builder.row(
        InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="workout_search"),
        InlineKeyboardButton(text="üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="workout_stats")
    )
    
    await message.answer(workouts_text, reply_markup=builder.as_markup(), parse_mode="HTML")

@workouts_supabase_router.callback_query(F.data == "workout_add")
async def add_workout_start_supabase(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ Supabase"""
    user_id = str(callback.from_user.id)
    trainer = await SupabaseTrainerService.get_trainer_by_telegram_id(user_id)
    
    if not trainer:
        await callback.message.edit_text("‚ùå –¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
    clients = await SupabaseClientService.get_trainer_clients(trainer.id)
    
    if not clients:
        await callback.message.edit_text(
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n"
            "‚òÅÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /clients",
            parse_mode="HTML"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç—Ä–µ–Ω–µ—Ä–∞
    await state.update_data(trainer_id=trainer.id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
    clients_text = "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>\n\n"
    
    builder = InlineKeyboardBuilder()
    
    for client in clients:
        clients_text += f"‚Ä¢ {client.first_name} {client.last_name or ''}\n"
        builder.row(
            InlineKeyboardButton(
                text=f"üë§ {client.first_name} {client.last_name or ''}",
                callback_data=f"workout_select_client_{client.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="workout_menu")
    )
    
    await callback.message.edit_text(clients_text, reply_markup=builder.as_markup(), parse_mode="HTML")

@workouts_supabase_router.callback_query(F.data.startswith("workout_select_client_"))
async def select_client_for_workout_supabase(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ Supabase"""
    client_id = int(callback.data.split("_")[3])
    
    client = await SupabaseClientService.get_client_by_id(client_id)
    if not client:
        await callback.message.edit_text("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞
    await state.update_data(client_id=client_id)
    
    await callback.message.edit_text(
        f"üìÖ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è: {client.first_name} {client.last_name or ''}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ <code>—Å–µ–≥–æ–¥–Ω—è 18:00</code>\n"
        "‚Ä¢ <code>–∑–∞–≤—Ç—Ä–∞ 10:30</code>\n"
        "‚Ä¢ <code>28.05.2024 15:00</code>\n"
        "‚Ä¢ <code>–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 09:00</code>",
        parse_mode="HTML"
    )
    await state.set_state(BotStates.WORKOUT_DATETIME)

@workouts_supabase_router.message(BotStates.WORKOUT_DATETIME)
async def workout_datetime_supabase(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è Supabase"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        scheduled_date = parse_datetime_string(message.text.strip())
        
        if not scheduled_date:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è 18:00\n"
                "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ 15:30\n"
                "‚Ä¢ 30.05.2024 10:00"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if scheduled_date < datetime.now():
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –±—É–¥—É—â—É—é –¥–∞—Ç—É:")
            return
        
        await state.update_data(scheduled_date=scheduled_date)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        await message.answer(
            f"üìÖ <b>–î–∞—Ç–∞:</b> {scheduled_date.strftime('%d.%m.%Y %H:%M')}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
            reply_markup=get_workout_type_keyboard(),
            parse_mode="HTML"
        )
        await state.set_state(BotStates.WORKOUT_TYPE)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è 18:00\n"
            "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ 15:30\n"
            "‚Ä¢ 30.05.2024 10:00"
        )

@workouts_supabase_router.callback_query(F.data.startswith("workout_type_"), BotStates.WORKOUT_TYPE)
async def workout_type_supabase(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è Supabase"""
    workout_type_map = {
        "workout_type_strength": "–°–∏–ª–æ–≤–∞—è",
        "workout_type_cardio": "–ö–∞—Ä–¥–∏–æ",
        "workout_type_functional": "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è",
        "workout_type_stretching": "–†–∞—Å—Ç—è–∂–∫–∞",
        "workout_type_martial_arts": "–ï–¥–∏–Ω–æ–±–æ—Ä—Å—Ç–≤–∞",
        "workout_type_swimming": "–ü–ª–∞–≤–∞–Ω–∏–µ",
        "workout_type_cycling": "–í–µ–ª–æ—Å–∏–ø–µ–¥",
        "workout_type_mixed": "–°–º–µ—à–∞–Ω–Ω–∞—è"
    }
    
    workout_type = workout_type_map.get(callback.data, "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
    await state.update_data(workout_type=workout_type)
    
    await callback.message.edit_text(
        f"üèãÔ∏è <b>–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b> {workout_type}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è 60 –º–∏–Ω—É—Ç):"
    )
    await state.set_state(BotStates.WORKOUT_DURATION)

@workouts_supabase_router.message(BotStates.WORKOUT_DURATION)
async def workout_duration_supabase(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è Supabase"""
    duration = 60  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 –º–∏–Ω—É—Ç
    
    if message.text != "/skip":
        try:
            duration = int(message.text)
            if duration < 15 or duration > 300:
                await message.answer("‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 15 –¥–æ 300 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç):")
            return
    
    await state.update_data(duration_minutes=duration)
    
    await message.answer(
        f"‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration} –º–∏–Ω—É—Ç\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∏–ª–∏ /skip):"
    )
    await state.set_state(BotStates.WORKOUT_LOCATION)

@workouts_supabase_router.message(BotStates.WORKOUT_LOCATION)
async def workout_location_supabase(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –º–µ—Å—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è Supabase"""
    location = None if message.text == "/skip" else message.text.strip()
    
    await state.update_data(location=location)
    
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ (–∏–ª–∏ /skip):"
    )
    await state.set_state(BotStates.WORKOUT_NOTES)

@workouts_supabase_router.message(BotStates.WORKOUT_NOTES)
async def workout_notes_supabase(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –∑–∞–º–µ—Ç–æ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ Supabase"""
    notes = None if message.text == "/skip" else message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ Supabase
        workout = await SupabaseWorkoutService.create_workout(
            trainer_id=data.get("trainer_id"),
            client_id=data.get("client_id"),
            scheduled_date=data.get("scheduled_date"),
            workout_type=data.get("workout_type"),
            duration_minutes=data.get("duration_minutes"),
            location=data.get("location"),
            trainer_notes=notes
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        client = await SupabaseClientService.get_client_by_id(data.get("client_id"))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        summary_text = f"""
‚úÖ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Supabase!</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client.first_name} {client.last_name or ''}
üìÖ <b>–î–∞—Ç–∞:</b> {workout.scheduled_date.strftime('%d.%m.%Y %H:%M')}
üèãÔ∏è <b>–¢–∏–ø:</b> {data.get("workout_type")}
‚è±Ô∏è <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {workout.duration_minutes} –º–∏–Ω—É—Ç
üìç <b>–ú–µ—Å—Ç–æ:</b> {workout.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

‚òÅÔ∏è <b>ID —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b> {workout.id}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> ‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞

üí° <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üìã –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", callback_data=f"workout_add_exercises_{workout.id}")
        )
        builder.row(
            InlineKeyboardButton(text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="workout_today"),
            InlineKeyboardButton(text="üí™ –ù–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="workout_add")
        )
        
        await message.answer(
            summary_text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ Supabase: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ Supabase.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    
    await state.clear()

@workouts_supabase_router.callback_query(F.data == "workout_today")
async def show_today_workouts_supabase(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏–∑ Supabase"""
    user_id = str(callback.from_user.id)
    trainer = await SupabaseTrainerService.get_trainer_by_telegram_id(user_id)
    
    if not trainer:
        await callback.message.edit_text("‚ùå –¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    today_workouts = await SupabaseWorkoutService.get_today_workouts(trainer.id)
    
    if not today_workouts:
        await callback.message.edit_text(
            "üìÖ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
            "–°–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n\n"
            "‚òÅÔ∏è <i>–î–∞–Ω–Ω—ã–µ –∏–∑ Supabase</i>",
            parse_mode="HTML"
        )
        return
    
    workouts_text = f"üìÖ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({len(today_workouts)})</b>\n"
    workouts_text += f"‚òÅÔ∏è <i>–î–∞–Ω–Ω—ã–µ –∏–∑ Supabase</i>\n\n"
    
    builder = InlineKeyboardBuilder()
    
    for workout in today_workouts:
        time_str = workout.scheduled_date.strftime('%H:%M')
        
        status_emoji = {
            "planned": "‚è≥",
            "completed": "‚úÖ", 
            "missed": "‚ùå",
            "cancelled": "üö´"
        }
        emoji = status_emoji.get(workout.status.value, "‚è≥")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        workout_type = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
        if workout.trainer_notes and workout.trainer_notes.startswith('['):
            end_bracket = workout.trainer_notes.find(']')
            if end_bracket > 0:
                workout_type = workout.trainer_notes[1:end_bracket]
        
        workouts_text += f"{emoji} <b>{time_str}</b> - {workout.client.first_name} {workout.client.last_name or ''}\n"
        workouts_text += f"   üèãÔ∏è {workout_type} ({workout.duration_minutes} –º–∏–Ω)\n"
        if workout.location:
            workouts_text += f"   üìç {workout.location}\n"
        workouts_text += f"   üÜî ID: {workout.id}\n\n"
        
        builder.row(
            InlineKeyboardButton(
                text=f"{time_str} - {workout.client.first_name}",
                callback_data=f"workout_view_{workout.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚ûï –ù–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="workout_add")
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="workout_menu")
    )
    
    await callback.message.edit_text(
        workouts_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@workouts_supabase_router.callback_query(F.data.startswith("workout_view_"))
async def view_workout_supabase(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ Supabase"""
    workout_id = int(callback.data.split("_")[2])
    
    workout = await SupabaseWorkoutService.get_workout_by_id(workout_id)
    
    if not workout:
        await callback.message.edit_text("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Supabase")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    status_names = {
        "planned": "‚è≥ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞",
        "completed": "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞",
        "missed": "‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–∞", 
        "cancelled": "üö´ –û—Ç–º–µ–Ω–µ–Ω–∞"
    }
    
    status_name = status_names.get(workout.status.value, workout.status.value)
    date_str = workout.scheduled_date.strftime("%d.%m.%Y %H:%M")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    workout_type = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"
    notes = workout.trainer_notes or ""
    if notes.startswith('['):
        end_bracket = notes.find(']')
        if end_bracket > 0:
            workout_type = notes[1:end_bracket]
            notes = notes[end_bracket+1:].strip()
    
    workout_text = f"""
üí™ <b>–î–µ—Ç–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>
‚òÅÔ∏è <i>–î–∞–Ω–Ω—ã–µ –∏–∑ Supabase (ID: {workout.id})</i>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {workout.client.first_name} {workout.client.last_name or ''}
üìÖ <b>–î–∞—Ç–∞:</b> {date_str}
üèãÔ∏è <b>–¢–∏–ø:</b> {workout_type}
üïê <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {workout.duration_minutes or 60} –º–∏–Ω—É—Ç
üìç <b>–ú–µ—Å—Ç–æ:</b> {workout.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üéØ <b>–°—Ç–∞—Ç—É—Å:</b> {status_name}
"""
    
    if workout.completed_at:
        completed_str = workout.completed_at.strftime("%d.%m.%Y %H:%M")
        workout_text += f"‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∞:</b> {completed_str}\n"
    
    if notes:
        workout_text += f"\nüìù <b>–ó–∞–º–µ—Ç–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–∞:</b>\n{notes}"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–ª–∞–Ω —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    if workout.exercises:
        workout_text += "\n\nüèãÔ∏è‚Äç‚ôÄÔ∏è <b>–ü–ª–∞–Ω —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:</b>\n"
        for i, exercise in enumerate(workout.exercises, 1):
            exercise_name = exercise.get('name', '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')
            sets = exercise.get('sets', 1)
            reps = exercise.get('reps', '')
            weight = exercise.get('weight', '')
            
            exercise_line = f"{i}. {exercise_name}"
            if sets:
                exercise_line += f" - {sets} –ø–æ–¥—Ö–æ–¥–æ–≤"
            if reps:
                exercise_line += f" x {reps}"
            if weight:
                exercise_line += f" ({weight} –∫–≥)"
            
            workout_text += exercise_line + "\n"
    
    if workout.client_feedback:
        workout_text += f"\nüí¨ <b>–û—Ç–∑—ã–≤ –∫–ª–∏–µ–Ω—Ç–∞:</b>\n{workout.client_feedback}"
    
    if workout.perceived_exertion:
        workout_text += f"\nüí™ <b>–£—Å–∏–ª–∏–µ (1-10):</b> {workout.perceived_exertion}/10"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
    builder = InlineKeyboardBuilder()
    
    if workout.status.value == 'planned':
        builder.row(
            InlineKeyboardButton(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –ø–ª–∞–Ω", callback_data=f"workout_edit_plan_{workout_id}"),
            InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π", callback_data=f"workout_complete_{workout_id}")
        )
        builder.row(
            InlineKeyboardButton(text="üö´ –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"workout_cancel_{workout_id}")
        )
    elif workout.status.value == 'completed':
        builder.row(
            InlineKeyboardButton(text="üìä –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"workout_add_report_{workout_id}")
        )
    
    builder.row(
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"workout_delete_confirm_{workout_id}"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="workout_today")
    )
    
    await callback.message.edit_text(
        workout_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@workouts_supabase_router.callback_query(F.data.startswith("workout_complete_"))
async def complete_workout_supabase(callback: CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –≤ Supabase"""
    workout_id = int(callback.data.split("_")[2])
    
    try:
        await SupabaseWorkoutService.update_workout_status(
            workout_id, 
            'completed'
        )
        
        await callback.message.edit_text(
            "‚úÖ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è!</b>\n\n"
            "‚òÅÔ∏è –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Supabase.\n\n"
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ?",
            parse_mode="HTML"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üìä –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"workout_add_report_{workout_id}")
        )
        builder.row(
            InlineKeyboardButton(text="üìÖ –ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", callback_data="workout_today"),
            InlineKeyboardButton(text="üí™ –ù–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="workout_add")
        )
        
        await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ Supabase: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ Supabase")

@workouts_supabase_router.callback_query(F.data.startswith("workout_delete_confirm_"))
async def delete_workout_confirm_supabase(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ Supabase"""
    workout_id = int(callback.data.split("_")[3])
    
    workout = await SupabaseWorkoutService.get_workout_by_id(workout_id)
    if not workout:
        await callback.message.edit_text("‚ùå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Supabase")
        return
    
    date_str = workout.scheduled_date.strftime("%d.%m.%Y %H:%M")
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"–£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∏–∑ Supabase?\n\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {date_str}\n"
        f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {workout.client.first_name} {workout.client.last_name or ''}\n\n"
        "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n"
        "‚òÅÔ∏è –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ–±–ª–∞—á–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        reply_markup=get_confirmation_keyboard("delete_workout", workout_id),
        parse_mode="HTML"
    )

@workouts_supabase_router.callback_query(F.data.startswith("confirm_delete_workout_"))
async def delete_workout_confirmed_supabase(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ Supabase"""
    workout_id = int(callback.data.split("_")[3])
    
    try:
        await SupabaseWorkoutService.delete_workout(workout_id)
        
        await callback.message.edit_text(
            f"‚úÖ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞</b>\n\n"
            f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Supabase.\n\n"
            "‚òÅÔ∏è –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ–±–ª–∞—á–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            parse_mode="HTML"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        import asyncio
        await asyncio.sleep(2)
        await show_workouts_menu_supabase(callback.message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ Supabase: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ Supabase")

def parse_datetime_string(text: str) -> datetime:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    from datetime import datetime, timedelta
    import re
    
    text = text.lower().strip()
    now = datetime.now()
    
    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    time_pattern = r'(\d{1,2}):(\d{2})'
    date_pattern = r'(\d{1,2})\.(\d{1,2})\.(\d{4})'
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
    time_match = re.search(time_pattern, text)
    if not time_match:
        return None
    
    hour = int(time_match.group(1))
    minute = int(time_match.group(2))
    
    if hour > 23 or minute > 59:
        return None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
    if '—Å–µ–≥–æ–¥–Ω—è' in text:
        target_date = now.date()
    elif '–∑–∞–≤—Ç—Ä–∞' in text:
        target_date = (now + timedelta(days=1)).date()
    elif '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫' in text:
        days_ahead = 0 - now.weekday()
        if days_ahead <= 0:  # Target day already happened this week
            days_ahead += 7
        target_date = (now + timedelta(days=days_ahead)).date()
    elif '–≤—Ç–æ—Ä–Ω–∏–∫' in text:
        days_ahead = 1 - now.weekday()
        if days_ahead <= 0:
            days_ahead += 7
        target_date = (now + timedelta(days=days_ahead)).date()
    elif '—Å—Ä–µ–¥–∞' in text or '—Å—Ä–µ–¥—É' in text:
        days_ahead = 2 - now.weekday()
        if days_ahead <= 0:
            days_ahead += 7
        target_date = (now + timedelta(days=days_ahead)).date()
    elif '—á–µ—Ç–≤–µ—Ä–≥' in text:
        days_ahead = 3 - now.weekday()
        if days_ahead <= 0:
            days_ahead += 7
        target_date = (now + timedelta(days=days_ahead)).date()
    elif '–ø—è—Ç–Ω–∏—Ü' in text:
        days_ahead = 4 - now.weekday()
        if days_ahead <= 0:
            days_ahead += 7
        target_date = (now + timedelta(days=days_ahead)).date()
    elif '—Å—É–±–±–æ—Ç' in text:
        days_ahead = 5 - now.weekday()
        if days_ahead <= 0:
            days_ahead += 7
        target_date = (now + timedelta(days=days_ahead)).date()
    elif '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å' in text:
        days_ahead = 6 - now.weekday()
        if days_ahead <= 0:
            days_ahead += 7
        target_date = (now + timedelta(days=days_ahead)).date()
    else:
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥
        date_match = re.search(date_pattern, text)
        if date_match:
            day = int(date_match.group(1))
            month = int(date_match.group(2))
            year = int(date_match.group(3))
            try:
                target_date = datetime(year, month, day).date()
            except ValueError:
                return None
        else:
            return None
    
    # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç
    try:
        result = datetime.combine(target_date, datetime.min.time().replace(hour=hour, minute=minute))
        return result
    except ValueError:
        return None
