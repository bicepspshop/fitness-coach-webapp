from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

from shared.supabase_database import SupabaseTrainerService, SupabaseClientService
from shared.models import Gender, Goal
from keyboards.main_menu import (
    get_clients_menu_keyboard, get_gender_keyboard, get_goal_keyboard, 
    get_activity_level_keyboard, get_client_actions_keyboard,
    get_confirmation_keyboard, get_pagination_keyboard
)
from utils.states import BotStates

clients_supabase_router = Router()

@clients_supabase_router.message(Command("clients"))
async def cmd_clients_supabase(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Supabase"""
    await show_clients_list_supabase(message)

async def show_clients_list_supabase(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ Supabase"""
    user_id = str(message.from_user.id)
    trainer = await SupabaseTrainerService.get_trainer_by_telegram_id(user_id)
    
    if not trainer:
        await message.answer("‚ùå –¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    clients = await SupabaseClientService.get_trainer_clients(trainer.id)
    
    if not clients:
        await message.answer(
            "üìù <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!\n\n"
            "‚òÅÔ∏è <i>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Supabase</i>",
            reply_markup=get_clients_menu_keyboard(),
            parse_mode="HTML"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
    clients_text = f"üë• <b>–í–∞—à–∏ –∫–ª–∏–µ–Ω—Ç—ã ({len(clients)})</b>\n"
    clients_text += f"‚òÅÔ∏è <i>–î–∞–Ω–Ω—ã–µ –∏–∑ Supabase</i>\n\n"
    
    for i, client in enumerate(clients[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
        status = "‚úÖ" if client.is_active else "‚ùå"
        goal_emoji = {
            Goal.WEIGHT_LOSS: "üî•",
            Goal.MUSCLE_GAIN: "üí™", 
            Goal.STRENGTH: "‚ö°",
            Goal.ENDURANCE: "üèÉ‚Äç‚ôÇÔ∏è",
            Goal.HEALTH: "üè•",
            Goal.SPORT_SPECIFIC: "üèÜ"
        }.get(client.primary_goal, "üéØ")
        
        clients_text += f"{i}. {status} <b>{client.first_name} {client.last_name or ''}</b>\n"
        clients_text += f"   {goal_emoji} {client.primary_goal.value if client.primary_goal else '–¶–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        if client.phone:
            clients_text += f"   üì± {client.phone}\n"
        clients_text += "\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    builder = InlineKeyboardBuilder()
    
    for client in clients[:10]:
        builder.row(
            InlineKeyboardButton(
                text=f"üë§ {client.first_name} {client.last_name or ''}",
                callback_data=f"client_view_{client.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="client_add")
    )
    
    if len(clients) > 10:
        builder.row(
            InlineKeyboardButton(text="üìã –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã", callback_data="client_list_all")
        )
    
    await message.answer(clients_text, reply_markup=builder.as_markup(), parse_mode="HTML")

@clients_supabase_router.callback_query(F.data == "client_list")
async def callback_clients_list_supabase(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ Supabase"""
    await callback.message.edit_reply_markup()
    await show_clients_list_supabase(callback.message)

@clients_supabase_router.callback_query(F.data == "client_add")
async def add_client_start_supabase(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ Supabase"""
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n"
        "‚òÅÔ∏è <i>–î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Supabase</i>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:",
        parse_mode="HTML"
    )
    await state.set_state(BotStates.CLIENT_FIRST_NAME)

@clients_supabase_router.message(BotStates.CLIENT_FIRST_NAME)
async def client_first_name_supabase(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Supabase"""
    if len(message.text.strip()) < 2:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(first_name=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∫–ª–∏–µ–Ω—Ç–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(BotStates.CLIENT_LAST_NAME)

@clients_supabase_router.message(BotStates.CLIENT_LAST_NAME)
async def client_last_name_supabase(message: Message, state: FSMContext):
    """–í–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Supabase"""
    last_name = None if message.text == "/skip" else message.text.strip()
    
    await state.update_data(last_name=last_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–∏–ª–∏ /skip):")
    await state.set_state(BotStates.CLIENT_PHONE)

@clients_supabase_router.message(BotStates.CLIENT_PHONE)
async def client_phone_supabase(message: Message, state: FSMContext):
    """–í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Supabase"""
    phone = None if message.text == "/skip" else message.text.strip()
    
    await state.update_data(phone=phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ email –∫–ª–∏–µ–Ω—Ç–∞ (–∏–ª–∏ /skip):")
    await state.set_state(BotStates.CLIENT_EMAIL)

@clients_supabase_router.message(BotStates.CLIENT_EMAIL)
async def client_email_supabase(message: Message, state: FSMContext):
    """–í–≤–æ–¥ email –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Supabase"""
    email = None if message.text == "/skip" else message.text.strip()
    
    await state.update_data(email=email)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_gender_keyboard()
    )
    await state.set_state(BotStates.CLIENT_GENDER)

@clients_supabase_router.callback_query(F.data.startswith("gender_"), BotStates.CLIENT_GENDER)
async def client_gender_supabase(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Supabase"""
    gender_map = {
        "gender_male": Gender.MALE,
        "gender_female": Gender.FEMALE,
        "gender_other": Gender.OTHER
    }
    
    gender = gender_map.get(callback.data)
    await state.update_data(gender=gender)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–º (–∏–ª–∏ /skip):",
    )
    await state.set_state(BotStates.CLIENT_HEIGHT)

@clients_supabase_router.message(BotStates.CLIENT_HEIGHT)
async def client_height_supabase(message: Message, state: FSMContext):
    """–í–≤–æ–¥ —Ä–æ—Å—Ç–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Supabase"""
    height = None
    
    if message.text != "/skip":
        try:
            height = float(message.text)
            if height < 100 or height > 250:
                await message.answer("‚ùå –†–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 100 –¥–æ 250 —Å–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –≤ —Å–º:")
            return
    
    await state.update_data(height=height)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–≥ (–∏–ª–∏ /skip):")
    await state.set_state(BotStates.CLIENT_WEIGHT)

@clients_supabase_router.message(BotStates.CLIENT_WEIGHT)
async def client_weight_supabase(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –≤–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Supabase"""
    weight = None
    
    if message.text != "/skip":
        try:
            weight = float(message.text)
            if weight < 30 or weight > 300:
                await message.answer("‚ùå –í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 30 –¥–æ 300 –∫–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –∫–≥:")
            return
    
    await state.update_data(weight=weight)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_goal_keyboard()
    )
    await state.set_state(BotStates.CLIENT_GOAL)

@clients_supabase_router.callback_query(F.data.startswith("goal_"), BotStates.CLIENT_GOAL)
async def client_goal_supabase(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ü–µ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è Supabase"""
    goal_map = {
        "goal_weight_loss": Goal.WEIGHT_LOSS,
        "goal_muscle_gain": Goal.MUSCLE_GAIN,
        "goal_strength": Goal.STRENGTH,
        "goal_endurance": Goal.ENDURANCE,
        "goal_health": Goal.HEALTH,
        "goal_sport_specific": Goal.SPORT_SPECIFIC
    }
    
    goal = goal_map.get(callback.data)
    await state.update_data(primary_goal=goal)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞:",
        reply_markup=get_activity_level_keyboard()
    )
    await state.set_state(BotStates.CLIENT_ACTIVITY_LEVEL)

@clients_supabase_router.callback_query(F.data.startswith("activity_"), BotStates.CLIENT_ACTIVITY_LEVEL)
async def client_activity_level_supabase(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è Supabase"""
    activity_map = {
        "activity_sedentary": "sedentary",
        "activity_light": "light", 
        "activity_moderate": "moderate",
        "activity_active": "active",
        "activity_very_active": "very_active"
    }
    
    activity = activity_map.get(callback.data)
    await state.update_data(activity_level=activity)
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è –∏–ª–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (–∏–ª–∏ /skip):"
    )
    await state.set_state(BotStates.CLIENT_MEDICAL_CONDITIONS)

@clients_supabase_router.message(BotStates.CLIENT_MEDICAL_CONDITIONS)
async def client_medical_conditions_supabase(message: Message, state: FSMContext):
    """–í–≤–æ–¥ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –¥–ª—è Supabase"""
    medical = None if message.text == "/skip" else message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ Supabase
    user_id = str(message.from_user.id)
    trainer = await SupabaseTrainerService.get_trainer_by_telegram_id(user_id)
    
    client = await SupabaseClientService.create_client(
        trainer_id=trainer.id,
        first_name=data.get("first_name"),
        last_name=data.get("last_name"),
        phone=data.get("phone"),
        email=data.get("email"),
        gender=data.get("gender"),
        height=data.get("height"),
        weight=data.get("weight"),
        primary_goal=data.get("primary_goal"),
        activity_level=data.get("activity_level"),
        medical_conditions=medical
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    summary_text = f"""
‚úÖ <b>–ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Supabase!</b>

üë§ <b>{client.first_name} {client.last_name or ''}</b>
üì± {client.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìß {client.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìä <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –†–æ—Å—Ç: {client.height or '–ù–µ —É–∫–∞–∑–∞–Ω'} —Å–º
‚Ä¢ –í–µ—Å: {client.weight or '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–≥
‚Ä¢ –¶–µ–ª—å: {client.primary_goal.value if client.primary_goal else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {client.activity_level or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

‚òÅÔ∏è <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> Supabase
üÜî <b>ID –∫–ª–∏–µ–Ω—Ç–∞:</b> {client.id}

üí° <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>
‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è
"""
    
    await message.answer(
        summary_text,
        reply_markup=get_client_actions_keyboard(client.id),
        parse_mode="HTML"
    )
    await state.clear()

@clients_supabase_router.callback_query(F.data.startswith("client_view_"))
async def view_client_supabase(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ –∏–∑ Supabase"""
    client_id = int(callback.data.split("_")[2])
    
    client = await SupabaseClientService.get_client_by_id(client_id)
    
    if not client:
        await callback.message.edit_text("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–∑ Supabase
    from shared.supabase_database import SupabaseWorkoutService
    workouts = await SupabaseWorkoutService.get_client_workouts(client_id, limit=5)
    total_workouts = len(await SupabaseWorkoutService.get_client_workouts(client_id))
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    completed_workouts = len([w for w in workouts if w.status.value == 'completed'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    client_text = f"""
üë§ <b>{client.first_name} {client.last_name or ''}</b>
‚òÅÔ∏è <i>–î–∞–Ω–Ω—ã–µ –∏–∑ Supabase (ID: {client.id})</i>

üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {client.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ Email: {client.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üîç <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>
‚Ä¢ –ü–æ–ª: {client.gender.value if client.gender else '–ù–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ –†–æ—Å—Ç: {client.height or '–ù–µ —É–∫–∞–∑–∞–Ω'} —Å–º
‚Ä¢ –í–µ—Å: {client.weight or '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–≥

üéØ <b>–¶–µ–ª–∏:</b>
‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª—å: {client.primary_goal.value if client.primary_goal else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
‚Ä¢ –¶–µ–ª–µ–≤–æ–π –≤–µ—Å: {client.target_weight or '–ù–µ —É–∫–∞–∑–∞–Ω'} –∫–≥
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {client.activity_level or '–ù–µ —É–∫–∞–∑–∞–Ω'}

üí™ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_workouts}
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed_workouts}
‚Ä¢ –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å: {(completed_workouts/total_workouts*100) if total_workouts > 0 else 0:.0f}%
"""
    
    if workouts:
        client_text += "\nüìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>\n"
        for workout in workouts[:3]:
            status_emoji = {
                "planned": "‚è≥",
                "completed": "‚úÖ", 
                "missed": "‚ùå",
                "cancelled": "üö´"
            }
            emoji = status_emoji.get(workout.status.value, "‚è≥")
            date_str = workout.scheduled_date.strftime("%d.%m.%Y %H:%M")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ –∑–∞–º–µ—Ç–æ–∫
            workout_type = ""
            if workout.trainer_notes and workout.trainer_notes.startswith('['):
                end_bracket = workout.trainer_notes.find(']')
                if end_bracket > 0:
                    workout_type = workout.trainer_notes[1:end_bracket]
            
            client_text += f"{emoji} {date_str} - {workout_type}\n"
    
    if client.medical_conditions:
        client_text += f"\nüè• <b>–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n{client.medical_conditions}"
    
    if client.injuries:
        client_text += f"\nü©π <b>–¢—Ä–∞–≤–º—ã:</b>\n{client.injuries}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    client_text += f"\n\nüìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {client.created_at.strftime('%d.%m.%Y')}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üí™ –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data=f"workout_create_for_{client_id}")
    )
    builder.row(
        InlineKeyboardButton(text="üìÖ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫", callback_data=f"client_workout_history_{client_id}"),
        InlineKeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data=f"client_progress_{client_id}")
    )
    builder.row(
        InlineKeyboardButton(text="üìä –ó–∞–º–µ—Ä—ã", callback_data=f"client_measurements_{client_id}"),
        InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"client_edit_{client_id}")
    )
    builder.row(
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"client_view_{client_id}"),
        InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"client_delete_{client_id}")
    )
    builder.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="client_list")
    )
    
    await callback.message.edit_text(
        client_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@clients_supabase_router.callback_query(F.data.startswith("client_delete_"))
async def delete_client_confirm_supabase(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Supabase"""
    client_id = int(callback.data.split("_")[2])
    
    client = await SupabaseClientService.get_client_by_id(client_id)
    if not client:
        await callback.message.edit_text("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase")
        return
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Supabase?\n"
        f"<b>{client.first_name} {client.last_name or ''}</b>\n\n"
        "‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n"
        "‚òÅÔ∏è –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ–±–ª–∞—á–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
        reply_markup=get_confirmation_keyboard("delete_client", client_id),
        parse_mode="HTML"
    )

@clients_supabase_router.callback_query(F.data.startswith("confirm_delete_client_"))
async def delete_client_confirmed_supabase(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ Supabase"""
    client_id = int(callback.data.split("_")[3])
    
    client = await SupabaseClientService.get_client_by_id(client_id)
    if client:
        client_name = f"{client.first_name} {client.last_name or ''}"
        await SupabaseClientService.delete_client(client_id)
        
        await callback.message.edit_text(
            f"‚úÖ <b>–ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª–µ–Ω</b>\n\n"
            f"{client_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ Supabase.\n\n"
            "‚òÅÔ∏è –î–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ–±–ª–∞—á–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            parse_mode="HTML"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        import asyncio
        await asyncio.sleep(2)
        await show_clients_list_supabase(callback.message)
    else:
        await callback.message.edit_text("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Supabase")

@clients_supabase_router.callback_query(F.data.startswith("cancel_delete_client_"))
async def delete_client_cancelled_supabase(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    client_id = int(callback.data.split("_")[3])
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∫–ª–∏–µ–Ω—Ç–∞
    await view_client_supabase(callback)

@clients_supabase_router.callback_query(F.data == "client_search")
async def search_client_start_supabase(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ Supabase"""
    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤</b>\n\n"
        "‚òÅÔ∏è <i>–ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Supabase</i>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ —Ñ–∞–º–∏–ª–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:",
        parse_mode="HTML"
    )
    await state.set_state(BotStates.CLIENT_SEARCH)

@clients_supabase_router.message(BotStates.CLIENT_SEARCH)
async def search_client_query_supabase(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞ –≤ Supabase"""
    user_id = str(message.from_user.id)
    trainer = await SupabaseTrainerService.get_trainer_by_telegram_id(user_id)
    
    if not trainer:
        await message.answer("‚ùå –¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    query = message.text.strip()
    
    if len(query) < 2:
        await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ Supabase
    clients = await SupabaseClientService.search_clients(trainer.id, query)
    
    if not clients:
        await message.answer(
            f"üîç <b>–ü–æ–∏—Å–∫: \"{query}\"</b>\n\n"
            "–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Supabase.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    search_text = f"üîç <b>–ü–æ–∏—Å–∫: \"{query}\"</b>\n"
    search_text += f"‚òÅÔ∏è <i>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ Supabase</i>\n\n"
    search_text += f"–ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}\n\n"
    
    builder = InlineKeyboardBuilder()
    
    for client in clients:
        status = "‚úÖ" if client.is_active else "‚ùå"
        goal_emoji = {
            Goal.WEIGHT_LOSS: "üî•",
            Goal.MUSCLE_GAIN: "üí™", 
            Goal.STRENGTH: "‚ö°",
            Goal.ENDURANCE: "üèÉ‚Äç‚ôÇÔ∏è",
            Goal.HEALTH: "üè•",
            Goal.SPORT_SPECIFIC: "üèÜ"
        }.get(client.primary_goal, "üéØ")
        
        search_text += f"{status} <b>{client.first_name} {client.last_name or ''}</b>\n"
        search_text += f"   {goal_emoji} {client.primary_goal.value if client.primary_goal else '–¶–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        if client.phone:
            search_text += f"   üì± {client.phone}\n"
        search_text += f"   üÜî ID: {client.id}\n\n"
        
        builder.row(
            InlineKeyboardButton(
                text=f"üë§ {client.first_name} {client.last_name or ''}",
                callback_data=f"client_view_{client.id}"
            )
        )
    
    builder.row(
        InlineKeyboardButton(text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="client_search")
    )
    
    await message.answer(
        search_text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await state.clear()
