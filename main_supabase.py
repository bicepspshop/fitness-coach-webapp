#!/usr/bin/env python3
"""
–§–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ - Telegram Bot (Supabase –≤–µ—Ä—Å–∏—è)
–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å Supabase
"""

import asyncio
import logging
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Supabase
def load_supabase_env():
    """–ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞ –¥–ª—è Supabase"""
    env_path = Path(__file__).parent.parent / '.env.supabase'
    if env_path.exists():
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key.strip()] = value.strip()
        print(f"‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Supabase –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    else:
        print(f"‚ö†Ô∏è –§–∞–π–ª .env.supabase –Ω–µ –Ω–∞–π–¥–µ–Ω")

load_supabase_env()

from aiogram import Bot, Dispatcher, Router, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, WebAppInfo, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Supabase –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ env
from shared.config_supabase import supabase_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è Windows
if sys.platform == 'win32':
    import os
    os.system('chcp 65001 > nul')  # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –Ω–∞ UTF-8
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=supabase_config.BOT_TOKEN)
dp = Dispatcher()

# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä
main_router = Router()

@main_router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Supabase"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ Supabase
    from shared.supabase_database import SupabaseTrainerService
    
    user_id = str(message.from_user.id)
    trainer = await SupabaseTrainerService.get_trainer_by_telegram_id(user_id)
    
    if not trainer:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ Supabase
        trainer = await SupabaseTrainerService.create_trainer(
            telegram_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        logger.info(f"üë§ –ù–æ–≤—ã–π —Ç—Ä–µ–Ω–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ Supabase: {trainer.first_name}")
    
    welcome_text = f"""
üèãÔ∏è‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫!

–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! 

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ –∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏.

‚òÅÔ∏è <b>Powered by Supabase</b> - –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–¥–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –æ–±–ª–∞–∫–µ!

üöÄ <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
‚Ä¢ üí™ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫  
‚Ä¢ üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
‚Ä¢ üçé –ü–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —É—á–µ—Ç

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /help
"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(
            text="üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=WebAppInfo(url=supabase_config.WEB_APP_URL)
        )
    )
    keyboard.row(
        InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        InlineKeyboardButton(text="üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data="clients")
    )
    keyboard.row(
        InlineKeyboardButton(text="üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", callback_data="workouts"),
        InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
    )
    
    await message.answer(
        welcome_text,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )

@main_router.message(Command("help"))
async def cmd_help(message: Message):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
<b>ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ (Supabase –≤–µ—Ä—Å–∏—è):</b>

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/profile - –ü—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞
/clients - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
/workouts - –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

<b>‚òÅÔ∏è Supabase –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚Ä¢ –û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
‚Ä¢ Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

<b>üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:</b>
–ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—Ä–æ–≥—Ä–∞–º–º
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–∏—Ç–∞–Ω–∏—è
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å

<b>üì± –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
‚Ä¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

<b>üí° –°–æ–≤–µ—Ç:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!
"""
    
    await message.answer(help_text, parse_mode="HTML")

@main_router.message(Command("profile"))
async def cmd_profile(message: Message):
    """–ü—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Supabase"""
    from shared.supabase_database import SupabaseTrainerService, SupabaseClientService, SupabaseWorkoutService
    
    user_id = str(message.from_user.id)
    trainer = await SupabaseTrainerService.get_trainer_by_telegram_id(user_id)
    
    if not trainer:
        await message.answer("‚ùå –¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Supabase
    clients_count = await SupabaseClientService.get_clients_count(trainer.id)
    workouts_count = await SupabaseWorkoutService.get_workouts_count(trainer.id)
    
    profile_text = f"""
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞</b>

<b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ò–º—è: {trainer.first_name} {trainer.last_name or ''}
‚Ä¢ Username: @{trainer.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ ID: {trainer.telegram_id}

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∏–∑ Supabase):</b>
‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤: {clients_count}
‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–æ: {workouts_count}
‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {trainer.created_at.strftime('%d.%m.%Y')}

<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª—é—á–µ–Ω—ã
‚Ä¢ –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π
‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ‚òÅÔ∏è Supabase

–î–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
"""
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
            web_app=WebAppInfo(url=f"{supabase_config.WEB_APP_URL}#/settings")
        )
    )
    
    await message.answer(profile_text, reply_markup=keyboard.as_markup(), parse_mode="HTML")

@main_router.message(Command("clients"))
async def cmd_clients(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ —á–µ—Ä–µ–∑ Supabase"""
    from shared.supabase_database import SupabaseTrainerService, SupabaseClientService
    
    user_id = str(message.from_user.id)
    trainer = await SupabaseTrainerService.get_trainer_by_telegram_id(user_id)
    
    if not trainer:
        await message.answer("‚ùå –¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    clients_count = await SupabaseClientService.get_clients_count(trainer.id)
    
    clients_text = f"""
üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ Supabase: {clients_count}

<b>–ß—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ üìù –í–µ—Å—Ç–∏ –∑–∞–º–µ—Ç–∫–∏

‚òÅÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å Supabase.

–û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
"""
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(
            text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏",
            web_app=WebAppInfo(url=f"{supabase_config.WEB_APP_URL}#/clients")
        )
    )
    keyboard.row(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞", callback_data="client_add"),
        InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="client_list")
    )
    
    await message.answer(clients_text, reply_markup=keyboard.as_markup(), parse_mode="HTML")

@main_router.message(Command("workouts"))
async def cmd_workouts(message: Message):
    """–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Supabase"""
    from shared.supabase_database import SupabaseTrainerService, SupabaseWorkoutService
    
    user_id = str(message.from_user.id)
    trainer = await SupabaseTrainerService.get_trainer_by_telegram_id(user_id)
    
    if not trainer:
        await message.answer("‚ùå –¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–∑ Supabase
    today_workouts = await SupabaseWorkoutService.get_today_workouts(trainer.id)
    upcoming_workouts = await SupabaseWorkoutService.get_upcoming_workouts(trainer.id, limit=5)
    total_workouts = await SupabaseWorkoutService.get_workouts_count(trainer.id)
    
    workouts_text = f"""
üí™ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</b>

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∏–∑ Supabase):</b>
‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_workouts}
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {len(today_workouts)}
‚Ä¢ –ë–ª–∏–∂–∞–π—à–∏—Ö: {len(upcoming_workouts)}

<b>üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è:</b>
"""
    
    if today_workouts:
        for workout in today_workouts:
            time_str = workout.scheduled_date.strftime('%H:%M')
            workouts_text += f"‚Ä¢ {time_str} - {workout.client.first_name} {workout.client.last_name or ''}\n"
    else:
        workouts_text += "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
    
    workouts_text += """
<b>üîß –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ üèÉ‚Äç‚ôÇÔ∏è –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ üìù –ó–∞–º–µ—Ç–∫–∏ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚Ä¢ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º

‚òÅÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Supabase.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.
"""
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(
            text="üí™ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
            web_app=WebAppInfo(url=f"{supabase_config.WEB_APP_URL}#/workouts")
        )
    )
    keyboard.row(
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="workout_add"),
        InlineKeyboardButton(text="üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="workout_today")
    )
    
    await message.answer(workouts_text, reply_markup=keyboard.as_markup(), parse_mode="HTML")

@main_router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ Supabase"""
    from shared.supabase_database import SupabaseTrainerService, SupabaseClientService, SupabaseWorkoutService
    
    user_id = str(message.from_user.id)
    trainer = await SupabaseTrainerService.get_trainer_by_telegram_id(user_id)
    
    if not trainer:
        await message.answer("‚ùå –¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Supabase
    clients_count = await SupabaseClientService.get_clients_count(trainer.id)
    workouts_count = await SupabaseWorkoutService.get_workouts_count(trainer.id)
    today_workouts = await SupabaseWorkoutService.get_today_workouts(trainer.id)
    
    stats_text = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∏–∑ Supabase)</b>

<b>üë• –ö–ª–∏–µ–Ω—Ç—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ: {clients_count}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {clients_count}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {clients_count}

<b>üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>
‚Ä¢ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ –≤—Å–µ–≥–æ: {workouts_count}
‚Ä¢ –ó–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü: {workouts_count}
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {len(today_workouts)}

<b>üí∞ –§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –î–æ—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü: - ‚ÇΩ
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: - ‚ÇΩ

<b>‚òÅÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: Supabase
‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞
‚Ä¢ –ü—Ä–æ–µ–∫—Ç: {supabase_config.SUPABASE_PROJECT_ID}

–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
"""
    
    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        InlineKeyboardButton(
            text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
            web_app=WebAppInfo(url=f"{supabase_config.WEB_APP_URL}#/analytics")
        )
    )
    
    await message.answer(stats_text, reply_markup=keyboard.as_markup(), parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤
@main_router.callback_query(F.data == "profile")
async def callback_profile(callback):
    await callback.message.edit_reply_markup()
    await cmd_profile(callback.message)

@main_router.callback_query(F.data == "clients")
async def callback_clients(callback):
    await callback.message.edit_reply_markup()
    await cmd_clients(callback.message)

@main_router.callback_query(F.data == "workouts")
async def callback_workouts(callback):
    await callback.message.edit_reply_markup()
    await cmd_workouts(callback.message)

@main_router.callback_query(F.data == "stats")
async def callback_stats(callback):
    await callback.message.edit_reply_markup()
    await cmd_stats(callback.message)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏–∏ –¥–ª—è Supabase)
from handlers.clients_supabase import clients_supabase_router
from handlers.workouts_supabase import workouts_supabase_router

dp.include_router(main_router)
dp.include_router(clients_supabase_router)
dp.include_router(workouts_supabase_router)

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ —Å Supabase"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏—Ç–Ω–µ—Å-–ø–æ–º–æ—â–Ω–∏–∫–∞ (Supabase –≤–µ—Ä—Å–∏—è)...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Supabase
    try:
        from shared.supabase_database import init_supabase_database
        await init_supabase_database()
        logger.info("‚úÖ Supabase –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase: {e}")
        raise
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    try:
        bot_info = await bot.get_me()
        logger.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ: @{bot_info.username}")
        logger.info(f"üë§ –ò–º—è –±–æ—Ç–∞: {bot_info.first_name}")
        logger.info(f"üÜî ID –±–æ—Ç–∞: {bot_info.id}")
        logger.info(f"‚òÅÔ∏è Supabase –ø—Ä–æ–µ–∫—Ç: {supabase_config.SUPABASE_PROJECT_ID}")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
        from aiogram.types import BotCommand
        commands = [
            BotCommand(command="start", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
            BotCommand(command="profile", description="üë§ –ü—Ä–æ—Ñ–∏–ª—å —Ç—Ä–µ–Ω–µ—Ä–∞"),
            BotCommand(command="clients", description="üë• –ö–ª–∏–µ–Ω—Ç—ã"),
            BotCommand(command="workouts", description="üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"),
            BotCommand(command="stats", description="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        ]
        await bot.set_my_commands(commands)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase
    try:
        from shared.supabase_database import supabase_db_manager
        await supabase_db_manager.close()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Supabase: {e}")
    
    await bot.session.close()
    logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å Supabase"""
    try:
        await on_startup()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("üèãÔ∏è‚Äç‚ôÇÔ∏è –§–∏—Ç–Ω–µ—Å-–±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å Supabase!")
        await dp.start_polling(bot, skip_updates=True)
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await on_shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
